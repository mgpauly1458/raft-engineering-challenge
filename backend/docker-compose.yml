# docker-compose.yml

version: '3.8'

services:
  backend:
    # Build from the backend directory, where your Dockerfile should be.
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - MESSAGE="Hello from Dockerized Express with Postgres!"
      - DB_HOST=db
      - DB_USER=myuser
      - DB_PASSWORD=mysecretpassword
      - DB_DATABASE=mydb
      - APP_ENV=prod
      - OPENAI_API_KEY=
    depends_on:
      db:
        condition: service_healthy
  web_socket:
    build:
      context: ../websocket
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - WS_PORT=8081 # change this to 8081 to match the frontend
      - OPENAI_API_KEY=
      - APP_ENV=prod
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=mydb
    restart: always
    # Use a named volume for the database data. This makes it easy to wipe.
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      # Check if the database and user are ready
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

# Define the named volume at the top level
volumes:
  postgres_data:
